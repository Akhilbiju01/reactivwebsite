{"version":3,"sources":["assets/images/blog-blue-network.png","icons.js","screens/Untitled.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","IconsCSS","concat","FontAwesome_ttf","Entypo_ttf","Octicons_ttf","SimpleLineIcons_ttf","MaterialIcons_ttf","EvilIcons_ttf","Feather_ttf","Ionicons_ttf","MaterialCommunityIcons_ttf","style","document","createElement","type","styleSheet","cssText","appendChild","createTextNode","head","Image","styled","img","_templateObject","Object","taggedTemplateLiteral","Rect","div","_templateObject2","DnaBarcoding","span","_templateObject3","Untitled","props","react_default","a","Fragment","src","require","App","react_router_dom","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gUCUlCC,EAAQ,8BAAAC,OAEDC,IAFC,iEAAAD,OAMDE,IANC,4DAAAF,OAUDG,IAVC,8DAAAH,OAcDI,IAdC,qEAAAJ,OAkBDK,IAlBC,mEAAAL,OAsBDM,IAtBC,+DAAAN,OA0BDO,IA1BC,6DAAAP,OA8BDQ,IA9BC,8DAAAR,OAkCDS,IAlCC,mDAuCRC,EAAQC,SAASC,cAAc,SACrCF,EAAMG,KAAO,WACTH,EAAMI,WAAYJ,EAAMI,WAAWC,QAAUhB,EAC5CW,EAAMM,YAAYL,SAASM,eAAelB,IAE/CY,SAASO,KAAKF,YAAYN,2BCzC1B,IAAMS,EAAQC,IAAOC,IAAVC,MAAAC,OAAAC,EAAA,EAAAD,CAAA,2HASLE,EAAOL,IAAOM,IAAVC,MAAAJ,OAAAC,EAAA,EAAAD,CAAA,gIASJK,EAAeR,IAAOS,KAAVC,MAAAP,OAAAC,EAAA,EAAAD,CAAA,8OAcHQ,EA1Cf,SAAkBC,GAChB,OACEC,EAAAC,EAAAtB,cAAAqB,EAAAC,EAAAC,SAAA,KACEF,EAAAC,EAAAtB,cAACO,EAAD,CAAOiB,IAAKC,EAAQ,MACpBJ,EAAAC,EAAAtB,cAACa,EAAD,MACAQ,EAAAC,EAAAtB,cAACgB,EAAD,8BCOSU,MATf,WACE,OACEL,EAAAC,EAAAtB,cAAC2B,EAAA,EAAD,KACEN,EAAAC,EAAAtB,cAAC4B,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWZ,IACjCE,EAAAC,EAAAtB,cAAC4B,EAAA,EAAD,CAAOC,KAAK,aAAaC,OAAK,EAACC,UAAWZ,MCE5Ba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,0DCZNC,IAASC,OAAOjB,EAAAC,EAAAtB,cAACuC,EAAD,MAASxC,SAASyC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1212c520.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/blog-blue-network.1f09edbc.png\";","/* eslint-disable camelcase */\nimport FontAwesome_ttf from \"react-native-vector-icons/Fonts/FontAwesome.ttf\";\nimport Entypo_ttf from \"react-native-vector-icons/Fonts/Entypo.ttf\";\nimport Octicons_ttf from \"react-native-vector-icons/Fonts/Octicons.ttf\";\nimport SimpleLineIcons_ttf from \"react-native-vector-icons/Fonts/SimpleLineIcons.ttf\";\nimport MaterialIcons_ttf from \"react-native-vector-icons/Fonts/MaterialIcons.ttf\";\nimport EvilIcons_ttf from \"react-native-vector-icons/Fonts/EvilIcons.ttf\";\nimport Feather_ttf from \"react-native-vector-icons/Fonts/Feather.ttf\";\nimport Ionicons_ttf from \"react-native-vector-icons/Fonts/Ionicons.ttf\";\nimport MaterialCommunityIcons_ttf from \"react-native-vector-icons/Fonts/MaterialCommunityIcons.ttf\";\nconst IconsCSS = `\n@font-face {\n  src: url(${FontAwesome_ttf});\n  font-family: FontAwesome;\n}\n@font-face {\n  src: url(${Entypo_ttf});\n  font-family: Entypo;\n}\n@font-face {\n  src: url(${Octicons_ttf});\n  font-family: Octicons;\n}\n@font-face {\n  src: url(${SimpleLineIcons_ttf});\n  font-family: SimpleLineIcons;\n}\n@font-face {\n  src: url(${MaterialIcons_ttf});\n  font-family: MaterialIcons;\n}\n@font-face {\n  src: url(${EvilIcons_ttf});\n  font-family: EvilIcons;\n}\n@font-face {\n  src: url(${Feather_ttf});\n  font-family: Feather;\n}\n@font-face {\n  src: url(${Ionicons_ttf});\n  font-family: Ionicons;\n}\n@font-face {\n  src: url(${MaterialCommunityIcons_ttf});\n  font-family: MaterialCommunityIcons;\n}\n`;\n\nconst style = document.createElement(\"style\");\nstyle.type = \"text/css\";\nif (style.styleSheet) style.styleSheet.cssText = IconsCSS;\nelse style.appendChild(document.createTextNode(IconsCSS));\n\ndocument.head.appendChild(style);\n","import React, { Component } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nfunction Untitled(props) {\n  return (\n    <>\n      <Image src={require(\"../assets/images/blog-blue-network.png\")}></Image>\n      <Rect></Rect>\n      <DnaBarcoding>DNA BARCODING</DnaBarcoding>\n    </>\n  );\n}\n\nconst Image = styled.img`\n  top: -43px;\n  left: -8px;\n  width: 1374px;\n  height: 857px;\n  position: absolute;\n  object-fit: contain;\n`;\n\nconst Rect = styled.div`\n  top: 25px;\n  left: 370px;\n  width: 664px;\n  height: 115px;\n  position: absolute;\n  background-color: #E6E6E6;\n`;\n\nconst DnaBarcoding = styled.span`\n  font-family: Roboto;\n  top: 52px;\n  left: 461px;\n  position: absolute;\n  font-style: normal;\n  font-weight: 400;\n  color: rgba(74,144,226,1);\n  height: 63px;\n  width: 461px;\n  font-size: 40px;\n  text-align: center;\n`;\n\nexport default Untitled;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./icons.js\";\nimport Untitled from \"./screens/Untitled\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Untitled} />\n      <Route path=\"/Untitled/\" exact component={Untitled} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = \"./service-worker.js\";\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}